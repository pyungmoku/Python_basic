# 음료수 얼려먹기
# N x M 크기의 얼음 틀
# 구멍이 뚫려 있는 부분은 0
# 칸막이가 존재하는 부분은 1
# 구멍이 뚫려 있는 부분끼리 서로연결되어 아이스크림 생성 가능
# 00110
# 00011
# 11111
# 00000
# 이 경우는 아이스크림이 총 3개 생성

# 연결요소 개수를 구하면 된다.
# 얼음을 얼릴 수 있는 공간이 상, 하, 좌, 우로 연결 되어 있다고 표현할 수 있다.
# 각 위치에서 상, 하, 좌, 우는 인접하다.
# 그럼 배열 하나하나가 노드가 되겠네.
# (1,1) 노드부터 시작하여, 0으로 연결된 모든 노드들을 방문한다. 
# 1로 처리된 노드는 이동처리 불가를 한다.
# 그럼 0으로 연결된 구성을 알 수 있다.

# DFS를 활용하는 알고리즘
# 1. 특정한 지점의 주변 상하좌우를 살펴본 뒤에 주변 지점 중에서 값이 '0'이면서 아직 방문하지 않은 지점이 있다면 해당지점을 방문한다.
# 2. 방문한 지점에서 다시 상하좌우를 살펴보면서 방문을 진행하는 과정을 반복하하면, 연결된 모든 지점을 방무할 수 있다.
# 3. 모든 노드에 대하여 1~2번의 과정을 반복하며, 방문하지 않은 지점의 수를 카운트 한다.


# DFS 함수
def dfs(x,y):
    # 주어진 범위를 벗어나는 경우에는 즉시 종료
    if x <= -1 or x >= n or y <= -1 or y >= m:
        return False
    # 현재 노드를 방문하지 않았다면
    if graph[x][y] == 0:
        # 해당 노드 방문 처리
        graph[x][y] = 1
        # 상하좌우 위치들도 모드 재귀적으로 호출
        dfs(x-1, y)
        dfs(x, y-1)
        dfs(x+1, y)
        dfs(x, y+1)
        return True
    else:
        return False

# N, M을 공백을 기준으로 구분하여 입력받기
n, m = map(int, input().split())

# 2차원 리스트의 맵 정보 입력받기
graph = []
for i in range(n):
    row = list(map(int, input()))
    graph.append(row)
print(graph)

# 모든 노드(위치)에 대하여 음료수 채우기
result = 0
for i in range(n):
    for j in range(m):
       # 현재 위치에서 DFS 수행
       if dfs(i, j) == True:
          result += 1
print(result)










